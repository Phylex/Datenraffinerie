========================
Configuration Generation
========================
The main responsibility of the daq procedure is to generate an manage the configuration of the target system.
To do this is uses the ``system_settings`` and ``parameters`` section of the daq procedure configuration. 
From these two sections the Well task generates a fully qualified configuration for every run of the procedure.

Configuration structure
-----------------------
The configuration is spit into three parts, the *default*, *initial* and *patch*.

**default**
  The default part is the configuration that describes the *power-on* or *reset* state of the daq and target systems.
  Thee default configuration is generated by merging the parameters specified in the files referenced in these
  ``system_settings/default`` section of the daq procedure configuration.

**init**
  The init configuration is a set of parameters that need to be set once at the beginning of the daq procedure but don't
  change over the course of the procedure. It is generated by merging all files specified in the ``system_settings/init`` section
  together with the parameters defined in the ``system_settings/override`` section.

**patch**
  The patch is the configuration that is unique for every run of the procedure. It is generated from the ``parameters`` section
  of the daq procedure configuration for each run by creating a patch for every point in the cartesian product of every dimension
  specified in the parameters section.


.. _default_config:

Default config generation
-------------------------
If the set of system states is taken to be a phase space, then the default configuration specfies the null vector of that phase
space. 
The default configuration is generated by merging the cofiguration from all files in the ``system_settings/default`` section.
To illustrate how this works the following example is given:

Assuming there are two default files are specified, one for the daq system and one for the device under test (DUT).

::
  
  daq:
    server:
      events: 0
      links:
        - id: 1
          name: 1
          link: 1
        - id: 2
          name: 2
          link: 4
      data_port: 5000
    client:
      data_port: 5000
      output_file_name: ./output.raw

being the file containing the default config for the daq system and

::

  target:
    global:
      ADC_gain: 1
      DAC_gain: 1
    ch:
      0:
        connected: 0
    	  threshold: 0
      1:
        connected: 0
    	  threshold: 0
      2:
        connected: 0
    	  thershold: 0
      3:
        connected: 0
    	  threshold: 0

being the default configuration of the target system.

If the files listed above are specified in the same order as above (so the daq config first and the target config second), the result would
look like this:

::

  daq:
    server:
      events: 0
      links:
        - id: 1
          name: 1
          link: 1
        - id: 2
          name: 2
          link: 4
      data_port: 5000
    client:
      data_port: 5000
      output_file_name: ./output.raw
  target:
    global:
      ADC_gain: 1
      DAC_gain: 1
    ch:
      0:
        connected: 0
    	  threshold: 0
      1:
        connected: 0
    	  threshold: 0
      2:
        connected: 0
    	  thershold: 0
      3:
        connected: 0
    	  threshold: 0

Assuming that the target config would also specify a daq parameter like in the following example and Assuming
that the files are listed in the following order in the ``system_settings/default`` list:
1. daq-default.yaml
2. target-default.yaml

::

  daq:
    client:
      output_file_name: ./myfilename.raw
  target:
    global:
      ADC_gain: 1
      DAC_gain: 1
    ch:
      0:
        connected: 0
    	  threshold: 0
      1:
        connected: 0
    	  threshold: 0
      2:
        connected: 0
    	  thershold: 0
      3:
        connected: 0
    	  threshold: 0

would result in:

::

  daq:
    server:
      events: 0
      links:
        - id: 1
          name: 1
          link: 1
        - id: 2
          name: 2
          link: 4
      data_port: 5000
    client:
      data_port: 5000
      output_file_name: ./myfilename.raw
  target:
    global:
      ADC_gain: 1
      DAC_gain: 1
    ch:
      0:
        connected: 0
    	  threshold: 0
      1:
        connected: 0
    	  threshold: 0
      2:
        connected: 0
    	  thershold: 0
      3:
        connected: 0
    	  threshold: 0

the resulting default configuration has the ``daq/client/output_file_name`` set to ``./myfilename.raw``
as the target config file was listed after the default config file. So configurations that are listed later
in the ``system_settings/default`` and the  ``system_settings/init`` file list take precedence over the files
listed earlier in the list.

Initial config generation
-------------------------
Again using the phase space analogy, the initial configuration specifies the vector to the starting point of the daq procedure,
or the (local) null vector of the subspace that is to be sampled by the daq procedure.

The initial configuration mechanism is the same mechanism that the `Default config generation`_ uses so parameters that are listed
in two or more files in the init file list will have a final value that is equal to the value specified in the last file
the parameter apears in. In the example above the init configuration is specified as a list of two files, one for the init configuration
of the daq system and one for the init configuration of the target.

::

  daq:
    server:
      events: 0
      data_port: 5001
  client:
      data_port: 5001

for the daq system and

::

  target:
    global:
      ADC_gain: 2
    ch:
      0:
        connected: 1
      1:
        connected: 1

for the target.

Patch generation
----------------
Patches are at the hart of the daq procedure. A patch is generated for every run performed by the daq procedure of the Datenraffinerie.
Patches are overlayed over the init configuration, which is in turn overlayed on the default configuration to construct a fully qualified
system configuration, aka. a single, exact point in the system phase space. A fully qualified system configuration specifies every parameter of the
every part of the measurement system.

A patch is generated from the ``parameters`` section of the daq procedure configuration. The ``parameters`` section consists of a list of dimensions
in the system phase space that samples should be taken along. If multiple dimensions are given, the daq procedure will create a patch for every
point of the cartesian product of the locations defined along each dimension.

So from the following ``parameters`` section:

::

  parameters:
    - key: ['channel', 0, 'threshold']
      values: [1,3,5,7]
    - key: ['channel', 1, 'threshold']
      values: [2,4,6,8]

the following set of patches is generated:

::

  - {channel: {0: {threshold: 1}},
     channel: {1: {threshold: 2}}}
  - {channel: {0: {threshold: 1}},
     channel: {1: {threshold: 4}}}
  - {channel: {0: {threshold: 1}},
     channel: {1: {threshold: 6}}}
  - {channel: {0: {threshold: 1}},
     channel: {1: {threshold: 8}}}
  - {channel: {0: {threshold: 3}},
     channel: {1: {threshold: 2}}}
  - {channel: {0: {threshold: 3}},
     channel: {1: {threshold: 4}}}
  - {channel: {0: {threshold: 3}},
     channel: {1: {threshold: 6}}}
  - {channel: {0: {threshold: 3}},
     channel: {1: {threshold: 8}}}
  - {channel: {0: {threshold: 5}},
     channel: {1: {threshold: 2}}}
  - {channel: {0: {threshold: 5}},
     channel: {1: {threshold: 4}}}
  - {channel: {0: {threshold: 5}},
     channel: {1: {threshold: 6}}}
  - {channel: {0: {threshold: 5}},
     channel: {1: {threshold: 8}}}
  - {channel: {0: {threshold: 7}},
     channel: {1: {threshold: 2}}}
  - {channel: {0: {threshold: 7}},
     channel: {1: {threshold: 4}}}
  - {channel: {0: {threshold: 7}},
     channel: {1: {threshold: 6}}}
  - {channel: {0: {threshold: 7}},
     channel: {1: {threshold: 8}}}

The patches are the difference in phase space between the local null vector that is the initial configuration, and the points in phase
space that measurement should be taken at. overlaying the patch onto the init and then overlaying the result of that onto the default
configuration gives the exact point in the 'absolute' phase space. The fully qualified configuration for the point in phase space specified
by the **first patch in the above list** (along with the above mentioned init and default configurations) would be:

::

  daq:
    server:
      events: 0
      links:
        - id: 1
          name: 1
          link: 1
        - id: 2
          name: 2
          link: 4
      data_port: 5001
    client:
      data_port: 5001
      output_file_name: ./myfilename.raw
  target:
    global:
      ADC_gain: 2
      DAC_gain: 1
    ch:
      0:
        connected: 1
    	  threshold: 1
      1:
        connected: 1
    	  threshold: 2
      2:
        connected: 0
    	  thershold: 0
      3:
        connected: 0
    	  threshold: 0

It can be seen that the ``data_port`` and ``ADC_gain`` from the initial configuration are applied to the fully qualified config, and the 
``threshold`` of channel 0 and 1 are taken from the patch.

aA value specified in the patch takes precedence over the the value in the init config which in turn takes precedence over the default configuration.

Important Note
--------------
Please take care to only specify parameters in the init configuration and in the parameter keys that match a parameter specified in the 
default configuration, if a parameter is mentioned in the init configuration that is not in the default this results in the total dimensionality
of the 'absolute' phase space to increase by one. So for example:

With a default configuration of
::

  my_param_1: 0
  my_param_2: 0

and an initial configuration of:
::

  my_pawam_1: 1

As can be seen there is a spelling error in the initial configuration, which results in:
::

  my_param_1: 0
  my_param_2: 0
  my_pawam_1: 1

which is not the intended result. This also translates to a erroneously specified parameter key.

This is important because the Datenraffinerie currently does not have the means to catch such errors.
